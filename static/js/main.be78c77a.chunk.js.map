{"version":3,"sources":["images/hero-mobile.jpg","images/hero-desktop.jpg","images/bg-pattern-desktop.svg","images/logo.svg","images/icon-arrow.svg","images/icon-error.svg","components/Header/Header.js","components/Typography/Paragraph.js","components/Typography/Heading.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","style","Paragraph","styled","p","Heading","h1","props","weight","color","StyledForm","form","error","Form","useState","email","setEmail","submitted","setSubmitted","regEx","invalid","submit","e","preventDefault","test","Fragment","target","onSubmit","value","onChange","type","onClick","arrow","GlobalStyle","createGlobalStyle","mainBG","App","heroMobile","srcSet","heroDesktop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,0LCG5B,SAASC,IACpB,OACI,yBAAKC,UAAU,aACX,yBAAKC,IAAKC,IAAMC,IAAI,oBAAoBC,MAAO,CAAC,YAAa,Y,+JCJzE,IAOeC,EAPGC,IAAOC,EAAV,K,gcCAf,IAsBeC,EAtBCF,IAAOG,GAAV,KACM,SAAAC,GAAK,OAAIA,EAAMC,UACrB,SAAAD,GAAK,OAAIA,EAAME,S,u0BCC5B,IAAMC,EAAaP,IAAOQ,KAAV,KAIY,SAAAJ,GAAK,OAAIA,EAAMK,MAAQ,MAAQ,sBAsBxC,SAAAL,GAAK,OAAIA,EAAMK,MAAQ,SAAW,UAItC,SAASC,IAAQ,IAAD,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,OAEKF,oBAAS,GAFd,mBAEtBG,EAFsB,KAEXC,EAFW,KAGvBC,EAAQ,yHACVC,GAAU,EAMd,SAASC,EAAOC,GACdA,EAAEC,iBACFL,GAAa,IACbE,GAAWD,EAAMK,KAAKT,MAEpBC,EAAS,IACTE,GAAa,GACbE,GAAU,GAId,OACE,kBAAC,IAAMK,SAAP,KACE,kBAACf,EAAD,CAAYgB,OAAO,mBAAmBd,OAAQQ,GAAWH,EAAWU,SAAUN,GAC5E,2BAAOO,MAAOb,EAAOc,SAlB3B,YAAqC,IAAVD,EAAS,EAAlBF,OAASE,MACzBZ,EAASY,MAkBL,yBAAK9B,IAAKc,IAAOZ,IAAI,QAAQH,UAAU,gBACvC,4BAAQiC,KAAK,SAASC,QAASV,GAAQ,yBAAKvB,IAAKkC,IAAOhC,IAAI,cAE5DoB,GAAWH,GAAa,uBAAGhB,MAAO,CAAEQ,MAAO,QAAnB,kC,2oCCnDhC,IAAMwB,EAAcC,YAAH,IAeKC,KAuEPC,MAxBf,WACE,OACE,0BAAMvC,UAAU,OACd,kBAACoC,EAAD,MACA,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,QACb,kBAACD,EAAD,MACA,yBAAKC,UAAU,eACbC,IAAKuC,IACLrC,IAAI,eACJsC,OAAM,UAAKD,IAAL,kBAAyBE,IAAzB,WAER,yBAAK1C,UAAU,aACb,kBAAC,EAAD,CAASW,OAAO,OAAhB,SAA4B,6BAAM,8CAClC,kBAAC,EAAD,kLACA,kBAACK,EAAD,CAAMD,OAAK,MAGf,yBAAKf,UAAU,gBAAgBC,IAAKyC,IAAavC,IAAI,oBChFzCwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.be78c77a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero-mobile.1d55799a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hero-desktop.003b0c97.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg-pattern-desktop.9a992951.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.877543ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-arrow.69950c2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-error.33780997.svg\";","import React from 'react';\r\nimport logo from '../../images/logo.svg';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"container\">\r\n            <img src={logo} alt=\"Base Apperal logo\" style={{'max-width': '158px'}} />\r\n        </div>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nconst Paragraph = styled.p`\r\n    line-height: 1.5;\r\n    @media (min-width: 600px) {\r\n      text-align: left;\r\n    }\r\n`;\r\n\r\nexport default Paragraph;","import styled from 'styled-components';\r\n\r\nconst Heading = styled.h1`\r\n    font-weight: ${props => props.weight};\r\n    color: ${props => props.color};\r\n    text-transform: uppercase;\r\n    letter-spacing: 10px;\r\n    text-align: center;\r\n    font-size: 3rem;\r\n    @media (min-width: 600px) {\r\n      text-align: left;\r\n      margin-top: 1.5em;\r\n    }\r\n\r\n    @media (min-width: 1200px) {\r\n        font-size: 4rem;\r\n    }\r\n\r\n    span {\r\n        color: black;\r\n        font-weight: 600;\r\n    }\r\n`;\r\n\r\nexport default Heading;","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport arrow from '../../images/icon-arrow.svg';\r\nimport error from '../../images/icon-error.svg';\r\n\r\nconst StyledForm = styled.form`\r\n    position: relative;\r\n    input {\r\n        width: 100%;\r\n        border: 1px solid ${props => props.error ? 'red' : 'hsl(0, 36%, 70%)'};\r\n        border-radius: 100px;\r\n        padding: .5em 7em .5em 1em;\r\n        outline: none;\r\n        font-size: 1.3rem;\r\n        color: hsl(0, 36%, 70%);\r\n    }\r\n    button {\r\n        position: absolute;\r\n        right: 1px;\r\n        top: 1px;\r\n        border: 0;\r\n        padding: .5em 2em;\r\n        border-radius: 50px;\r\n        height: calc(100% - 2px);\r\n        background: linear-gradient(135deg, hsl(0, 80%, 86%), hsl(0, 74%, 74%));\r\n        width: 100px;\r\n    }\r\n    .error__icon {\r\n        position: absolute;\r\n        right: 110px;\r\n        top: calc(50% - 12px);\r\n        display: ${props => props.error ? 'inline' : 'none'};\r\n    }\r\n`;\r\n\r\nexport default function Form() {\r\n  const [email, setEmail] = useState('');\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const regEx = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n  let invalid = false;\r\n\r\n  function handler({target: {value}}) {\r\n    setEmail(value);\r\n  }\r\n\r\n  function submit(e) {\r\n    e.preventDefault();\r\n    setSubmitted(true);\r\n    invalid = !regEx.test(email);\r\n    if(!invalid) {\r\n      setEmail('');\r\n      setSubmitted(false);\r\n      invalid = false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledForm target=\"/action_page.php\" error={!invalid && submitted} onSubmit={submit}>\r\n        <input value={email} onChange={handler} />\r\n        <img src={error} alt=\"error\" className=\"error__icon\" />\r\n        <button type=\"submit\" onClick={submit}><img src={arrow} alt=\"Submit\" /></button>\r\n      </StyledForm>\r\n      {!invalid && submitted && <p style={{ color: 'red' }}>Please provide a valid email.</p>}\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\nimport mainBG from './images/bg-pattern-desktop.svg';\nimport { createGlobalStyle } from 'styled-components';\nimport Header from './components/Header/Header';\nimport {\n  Paragraph,\n  Heading\n} from './components/Typography';\nimport heroMobile from './images/hero-mobile.jpg';\nimport heroDesktop from './images/hero-desktop.jpg';\nimport Form from './components/Form/Form';\n\nconst GlobalStyle = createGlobalStyle`\n  *, *::before, *::after {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'Josefin Sans', sans-serif;\n    color: hsl(0, 36%, 70%);\n    font-size: 16px;\n  }\n  img {\n    max-width: 100%;\n  }\n  .app {\n    max-width: min(100%, 1440px);\n    margin: 0 auto;\n    background: url(${mainBG});\n    background-size: cover;\n    background-repeat: no-repeat;\n    padding-top: 1px;\n  }\n  .container {\n    padding: 0 1em;\n    margin: 1em 0;\n\n    @media (min-width: 600px) {\n      > img {\n        margin-top: 4em;\n      }\n    }\n\n    @media (min-width: 900px) {\n      padding: 0 1em 0 10em;\n    }\n  }\n  .row {\n    @media (min-width: 600px) {\n      display: flex;\n    }\n  }\n  .hero__mobile {\n    @media (min-width: 600px) {\n      display: none;\n    }\n  }\n  .info {\n    @media (min-width: 600px) {\n      width: min(50%, 600px);\n    }\n  }\n  .hero__desktop {\n    display: none;\n    margin-left: auto;\n    @media (min-width: 600px) {\n      display: block;\n      width: min(45%, 610px);\n      object-fit: cover;\n      justify-self: flex-end;\n    }\n  }\n`\n\n\nfunction App() {\n  return (\n    <main className=\"app\">\n      <GlobalStyle />\n      <div className=\"row\">\n        <div className=\"info\">\n          <Header />\n          <img className=\"hero__mobile\"\n            src={heroMobile}\n            alt=\"Model posing\"\n            srcSet={`${heroMobile} 375w, ${heroDesktop} 610w`}\n          />\n          <div className=\"container\">\n            <Heading weight=\"300\">We're <br /><span>Coming soon</span></Heading>\n            <Paragraph>We're coming soon Hello fellow shoppers! We're currently building our new fashion store. Add your email below to stay up-to-date with announcements and our launch deals.</Paragraph>\n            <Form error/>\n          </div>\n        </div>\n        <img className=\"hero__desktop\" src={heroDesktop} alt=\"Model posing\"/>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}